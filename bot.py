import os
import asyncio
import logging
from typing import Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

# –ï—Å–ª–∏ —É –≤–∞—Å –≤—Å–µ –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
# –î–ª—è —Ü–µ–ª–µ–π —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –æ—Å—Ç–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç—ã –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
from parse_hausdorf import parse_hausdorf
from parse_miele_unique import parse_miele_unique
from parse_mieles import parse_mieles
from parse_tehnikapremium import parse_tehnikapremium
from utils import normalize_text # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ remove_miele –µ—Å—Ç—å –≤ utils

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_IDS = list(map(int, os.getenv("ALLOWED_USERS", "").split(','))) if os.getenv("ALLOWED_USERS") else []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫)
cache: Dict[str, List[Dict]] = {} # –ö—ç—à –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

@dp.message(Command("start"))
async def start_command(message: Message):
    if message.from_user.id not in ALLOWED_USER_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üîç –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ö–∏–º–∏—é Miele.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>twindos</code> –∏–ª–∏ <code>11206880</code>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—é —Ü–µ–Ω—ã –Ω–∞:\n"
        "‚Ä¢ TehnikaPremium.ru\n"
        "‚Ä¢ Mieles.ru\n"
        "‚Ä¢ Hausdorf.ru\n"
        "‚Ä¢ Miele-Unique.ru",
        parse_mode="HTML"
    )

@dp.message(F.text)
async def handle_product_request(message: Message):
    if message.from_user.id not in ALLOWED_USER_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    user_query = message.text.strip()
    if len(user_query) < 3:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    cache_key = normalize_text(user_query)
    
    main_product_data = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã TehnikaPremium –≤ –∫—ç—à–µ
    if cache_key in cache and cache[cache_key]:
        main_product_data = cache[cache_key][0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–ª—É—á—à–∏–π) –∏–∑ TehnikaPremium –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TehnikaPremium.ru: {main_product_data['title']}")
    
    if not main_product_data: # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ –∫—ç—à –±—ã–ª –ø—É—Å—Ç
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –ü–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ. user_query –±—É–¥–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –∫–∞–∫ original_title –∏ search_query
        tehnikapremium_results = await parse_tehnikapremium(user_query, user_query) 
        
        if not tehnikapremium_results:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ TehnikaPremium.ru")
            return
        
        main_product_data = tehnikapremium_results[0] # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        cache[cache_key] = tehnikapremium_results # –ö—ç—à–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ tehnikapremium
        
        logger.info(f"–ù–∞ TehnikaPremium.ru –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä: {main_product_data['title']} ({main_product_data['article']}) - {main_product_data['price']} RUB")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    original_title_for_competitors = main_product_data['title']
    article_tehnikapremium = main_product_data['article'] 
    price_tehnikapremium = main_product_data['price']
    link_tehnikapremium = main_product_data['link']

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    await bot.send_chat_action(message.chat.id, "typing")
    competitor_tasks = []
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ tehnikapremium) –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    competitor_tasks.append(parse_mieles(original_title_for_competitors, user_query))
    competitor_tasks.append(parse_hausdorf(original_title_for_competitors, user_query))
    competitor_tasks.append(parse_miele_unique(original_title_for_competitors, user_query))

    try:
        competitor_results = await asyncio.gather(*competitor_tasks, return_exceptions=True)
    except Exception as e:
        logger.error(f"Error during competitor parsing: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response_parts = [
        f"<b>{original_title_for_competitors}</b> <a href='{link_tehnikapremium}'>({article_tehnikapremium})</a>\n",
        f"üè∑Ô∏è <b>TehnikaPremium.ru</b>: {price_tehnikapremium} —Ä—É–±.\n" # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
    ]
    
    response_parts.append("\n–¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π result_list_or_exception - —ç—Ç–æ List[Dict] –∏–ª–∏ Exception)
    site_names = ["Mieles.ru", "Hausdorf.ru", "Miele-Unique.ru"]
    
    for i, result_list_or_exception in enumerate(competitor_results):
        site_name = site_names[i]
        
        if isinstance(result_list_or_exception, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {site_name}: {result_list_or_exception}")
            response_parts.append(f"‚Ä¢ {site_name}: ‚ùå –û—à–∏–±–∫–∞ ({result_list_or_exception.__class__.__name__})")
        elif result_list_or_exception: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç
            response_parts.append(f"‚Ä¢ <b>{site_name}</b>:")
            for item in result_list_or_exception:
                title = item.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                link = item.get('link', '#')
                price = item.get('price', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                response_parts.append(f"  - <a href='{link}'>{title}</a>: {price} —Ä—É–±.")
        else:
            response_parts.append(f"‚Ä¢ {site_name}: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    final_response = "\n".join(response_parts)
    
    await message.answer(final_response, parse_mode="HTML", disable_web_page_preview=True)

async def main():
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        if bot and bot.session:
            await bot.session.close()
            logger.info("Bot session closed")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass