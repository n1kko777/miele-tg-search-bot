import asyncio
from typing import Dict, List, Optional
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import BOT_TOKEN, REQUIRED_CHANNEL_ID, logger

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
from utils import normalize_text

from parsers.hausdorf import parse_hausdorf
from parsers.mieles import parse_mieles
from parsers.miele_unique import parse_miele_unique
from parsers.tehnikapremium import parse_tehnikapremium

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
cache: Dict[str, List[Dict]] = {} 
last_cache_clear_date: Optional[datetime] = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
async def is_user_subscribed_to_required_channel(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —á–ª–µ–Ω—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ aiogram.
    """
    if not REQUIRED_CHANNEL_ID: # –ï—Å–ª–∏ REQUIRED_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        logger.warning("REQUIRED_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.py. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return True # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(chat_id=REQUIRED_CHANNEL_ID, user_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        # 'member', 'administrator', 'creator', 'restricted' - —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏/—É—á–∞—Å—Ç–Ω–∏–∫–∏
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator', 'restricted']
            
        if not is_subscribed:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—Å—Ç–∞—Ç—É—Å: {chat_member.status}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {REQUIRED_CHANNEL_ID}.")
        return is_subscribed
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL_ID}: {e}", exc_info=True)
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ, –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω),
        # –ª—É—á—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –¥–æ—Å—Ç—É–ø–µ, —á—Ç–æ–±—ã –Ω–µ –¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –ø–æ–¥—Ä—è–¥.
        return False


# --- Telegram Bot Handlers ---

@dp.message(Command("start"), F.chat.type == 'private') # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'private'
async def start_command(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if not await is_user_subscribed_to_required_channel(message.from_user.id):
        await message.answer("üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        return
    
    await message.answer(
        "üîç –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ Miele.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>WWR880WPS</code> –∏–ª–∏ <code>–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞</code>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—é —Ü–µ–Ω—ã –Ω–∞:\n"
        "‚Ä¢ TehnikaPremium.ru\n"
        "‚Ä¢ Mieles.ru\n"
        "‚Ä¢ Hausdorf.ru\n"
        "‚Ä¢ Miele-Unique.ru",
        parse_mode="HTML"
    )

@dp.message(F.text, F.chat.type == 'private') # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'private'
async def handle_product_request(message: Message):
    global last_cache_clear_date, cache

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if not await is_user_subscribed_to_required_channel(message.from_user.id):
        await message.answer("üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
    current_date = datetime.now().date()
    if last_cache_clear_date is None or current_date > last_cache_clear_date.date():
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: –ø—Ä–µ–¥—ã–¥—É—â–∞—è –¥–∞—Ç–∞ {last_cache_clear_date.date() if last_cache_clear_date else 'N/A'}, —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ {current_date}")
        cache.clear()
        last_cache_clear_date = datetime.now() # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        logger.info("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

    # –ï—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ ALLOWED_USER_IDS, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    pass

    user_query = message.text.strip()
    if len(user_query) < 3:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    cache_key = normalize_text(user_query)
    
    main_product_data = None
    if cache_key in cache and cache[cache_key]:
        main_product_data = cache[cache_key][0]
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TehnikaPremium.ru: {main_product_data['title']}")
    
    if not main_product_data:
        await bot.send_chat_action(message.chat.id, "typing")
        
        tehnikapremium_results = await parse_tehnikapremium(f'Miele {user_query}') 
        
        if not tehnikapremium_results:
            tehnikapremium_results = [{
                'title': cache_key,
                'link': '',
                'price': '',
                'article': ''
            }]
        
        main_product_data = tehnikapremium_results[0]
        cache[cache_key] = tehnikapremium_results
        
        logger.info(f"–ù–∞ TehnikaPremium.ru –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä: {main_product_data['title']} ({main_product_data['article']}) - {main_product_data['price']} RUB")

    original_title_for_competitors = main_product_data['title']
    article_tehnikapremium = main_product_data['article'] 
    
    price_tehnikapremium = main_product_data['price']
    if isinstance(price_tehnikapremium, (int, float)):
        formatted_price_tehnikapremium = f"{price_tehnikapremium:,.0f}".replace(',', ' ')
    else:
        formatted_price_tehnikapremium = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

    link_tehnikapremium = main_product_data['link']

    await bot.send_chat_action(message.chat.id, "typing")
    competitor_tasks = []
    
    competitor_tasks.append(parse_mieles(original_title_for_competitors, user_query))
    competitor_tasks.append(parse_hausdorf(original_title_for_competitors, user_query))
    competitor_tasks.append(parse_miele_unique(original_title_for_competitors, user_query))

    try:
        competitor_results = await asyncio.gather(*competitor_tasks, return_exceptions=True)
    except Exception as e:
        logger.error(f"Error during competitor parsing: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.")
        return

    response_parts = [
        f"<b>{original_title_for_competitors}</b> <a href='{link_tehnikapremium}'>({article_tehnikapremium})</a>\n",
        f"üè∑Ô∏è <b>TehnikaPremium.ru</b>: {formatted_price_tehnikapremium} —Ä—É–±.\n"
    ]
    
    response_parts.append("\n–¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:")

    site_names = ["Mieles.ru", "Hausdorf.ru", "Miele-Unique.ru"]
    
    for i, result_list_or_exception in enumerate(competitor_results):
        site_name = site_names[i]
        
        if isinstance(result_list_or_exception, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {site_name}: {result_list_or_exception}")
            response_parts.append(f"‚Ä¢ {site_name}: ‚ùå –û—à–∏–±–∫–∞ ({result_list_or_exception.__class__.__name__})")
        elif result_list_or_exception:
            response_parts.append(f"‚Ä¢ <b>{site_name}</b>:")
            for item in result_list_or_exception:
                title = item.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                link = item.get('link', '#')
                price = item.get('price', None) 
                
                formatted_price = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                if isinstance(price, (int, float)):
                    formatted_price = f"{price:,.0f}".replace(',', ' ') + " —Ä—É–±." 
                else:
                    formatted_price = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' 

                response_parts.append(f"  - <a href='{link}'>{title}</a>: {formatted_price}")
        else:
            response_parts.append(f"‚Ä¢ {site_name}: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    final_response = "\n".join(response_parts)
    
    await message.answer(final_response, parse_mode="HTML", disable_web_page_preview=True)

# --- Main entry point ---

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º last_cache_clear_date –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    global last_cache_clear_date
    last_cache_clear_date = datetime.now() 
    logger.info(f"–ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏: {last_cache_clear_date.date()}")

    try:
        logger.info("–£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏...")
        await bot.delete_webhook(drop_pending_updates=True) 
        logger.info("–í–µ–±—Ö—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        if bot and bot.session:
            await bot.session.close()
            logger.info("Bot session closed")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass